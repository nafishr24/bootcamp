# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_OBXdWgtwwuza1KUFhbqpzU6DHWGwiEr

# Welcome
Silahkan gunakan notebook ini untuk mempelajari pemrosesan citra digital menggunakan CV dan PIL, selamat belajar!

Open CV : Open Source Computer Vision Library adalah library yang ditulis menggunakan C/C++ dan sering digunakan dalam pemrosesan gambar hingga deteksi objek
"""

import cv2

"""PIL (pillow) : Python Image Library yang bertujuan untuk operasi dan manipulasi gambar yang lebih umum dan mendasar."""

import PIL

"""## Pemrosesan Gambar

### Image Acquisition
"""

cats_img_path = "./images/cats_image.png"

# OpenCV untuk membaca gambar dari file
img = cv2.imread(cats_img_path, cv2.IMREAD_COLOR)
cv2.imshow('Gambar OpenCV', img)
cv2.waitKey(0)

print(type(img))
print(img)

print(img.shape)

# OpenCV untuk membaca dari kamera device
cap = cv2.VideoCapture(0)

if not cap.isOpened():
    print("Error: Tidak bisa membuka kamera.")
else:
    while True:
        ret, frame = cap.read()

        if not ret:
            print("Error: Tidak bisa menerima frame.")
            break

        cv2.imshow('Kamera Live', frame)

        if cv2.waitKey(1) == ord('q'):
            break

cap.release()
cv2.destroyAllWindows()

# PIL untuk membaca gambar dari file
from PIL import Image

try:
    img_rgb = Image.open(cats_img_path)

    print("Format:", img_rgb.format)
    print("Ukuran:", img_rgb.size)
    print("Mode:", img_rgb.mode)

    img_rgb.show(title='Gambar PIL')

except FileNotFoundError:
    print("Error: Gambar tidak ditemukan.")

print(type(img_rgb))
print(img_rgb)

## Fun Practice
import numpy as np

img_loaded = np.load('./images/image_ndarray.npy')
print(img_loaded)

## Reveal
cv2.imshow('Hasilnya:', img_loaded)
cv2.waitKey(0)
cv2.destroyAllWindows()

"""#### Basic Operation

1. Cropping
"""

# Cropping dengan openCV
img = cv2.imread(cats_img_path)

# [y0:yn, x0:xn]
cropped_img = img[10:450, 280:500]

cv2.imshow('Hasil Crop', cropped_img)
cv2.waitKey(0)
cv2.destroyAllWindows()

# Cropping dengan PIL
img = Image.open(cats_img_path)

# (kiri, atas, kanan, bawah)
box = (200, 100, 400, 300)
cropped_img = img.crop(box)

cropped_img.show()

"""2. Resizing"""

# Resizing dengan OpenCV
img = cv2.imread(cats_img_path)

new_size = (300, 200)

# cv2.INTER_AREA -> kecilin
# cv2.INTER_CUBIC || cv2.INTER_LINEAR -> memperbesar
# Metode interpolation
resized_img = cv2.resize(img, new_size, interpolation=cv2.INTER_AREA)

cv2.imshow('Hasil Resize', resized_img)
cv2.waitKey(0)
cv2.destroyAllWindows()

print(resized_img.size)

# Resizing dengan PIL
img = Image.open(cats_img_path)

new_size = (300, 200)

# Metode Resampling
resized_img = img.resize(new_size, Image.Resampling.LANCZOS)

resized_img.show()
print(resized_img.size)

"""3. Modifikasi Pixel"""

# modifikasi pixel dengan openCV
img = cv2.imread(cats_img_path)

px_bgr = img[100, 50]
print(f"Nilai BGR di (50,100): {px_bgr}")

img[100, 50] = [255, 0, 0]
print(f"Nilai baru di (50,100): {img[100, 50]}")

cv2.imshow('Piksel Dimodifikasi', img)
cv2.waitKey(0)
cv2.destroyAllWindows()

for i in range(100, 300) :
    for j in range(100, 300) :
        img[i, j] = [0, 0, 0]

cv2.imshow('Piksel Dimodifikasi', img)
cv2.waitKey(0)
cv2.destroyAllWindows()

# Modifikasi Pixel dengan PIL
img = Image.open(cats_img_path)

# cara 1
px_rgb = img.getpixel((50, 100))
print(f"Nilai RGB di (50,100): {px_rgb}")

img.putpixel((50, 100), (255, 0, 0))

# cara 2
pixel_map = img.load()
pixel_map[51, 101] = (0, 255, 0)

print(f"Nilai baru di (50,100): {img.getpixel((50, 100))}")
img.show()

print(pixel_map)

for i in range(100, 300) :
    for j in range(100, 300) :
        pixel_map[i, j] = (0, 0, 0)

img.show()

"""4. Rotasi"""

# Rotasi dengan openCV
img = cv2.imread(cats_img_path)

# Rotasi 45 derajat
h, w = img.shape[:2]
center = (w // 2, h // 2)
matrix = cv2.getRotationMatrix2D(center, 45, 1.0) # (pusat, sudut, skala)
rotated_img = cv2.warpAffine(img, matrix, (w, h))

cv2.imshow('Rotated', rotated_img)
cv2.waitKey(0)
cv2.destroyAllWindows()

from PIL import Image

img = Image.open(cats_img_path)

# Rotasi 45 derajat
# expand=True -> gambar gak kepotong
rotated_img = img.rotate(45, expand=True)
rotated_img.show()

"""5. Flip"""

# Flip dengan openCV
img = cv2.imread(cats_img_path)

flipped_h = cv2.flip(img, 1)
# flipcode 1: horizontal, 0: vertikal, -1: keduanya

cv2.imshow('Flipped', flipped_h)
cv2.waitKey(0)
cv2.destroyAllWindows()

# Flip dengan PIL
from PIL import ImageOps

img = Image.open(cats_img_path)

# Flip horizontal
flipped_img = ImageOps.mirror(img)
flipped_img.show()

"""### Image Enhancement"""

low_pict_path = "./images/low_pict.png"

# Enhancement dengan openCV
img = cv2.imread(low_pict_path)
# alpha: kontrol kontras (1.0-3.0)
# beta: kontrol kecerahan (0-100)
alpha = 1.5
beta = 0
enhanced_img = cv2.convertScaleAbs(img, alpha=alpha, beta=beta)

cv2.imshow('Original', img)
cv2.imshow('Enhanced', enhanced_img)
cv2.waitKey(0)
cv2.destroyAllWindows()

# Enhancement dengan PIL
from PIL import Image, ImageEnhance

img = Image.open(low_pict_path)

# Penyesuaian Kecerahan
enhancer = ImageEnhance.Brightness(img)
bright_img = enhancer.enhance(1.5) # 1.0: original, >1.0: lebih terang

# Penyesuaian Kontras
enhancer = ImageEnhance.Contrast(bright_img)
contrast_img = enhancer.enhance(1.5) # >1.0: lebih kontras
# contrast_img.show('Kontras Ditingkatkan')

# Penyesuaian Ketajaman
enhancer = ImageEnhance.Sharpness(contrast_img)
sharp_img = enhancer.enhance(2.0) # >1.0: lebih tajam
img.show('OG Pict')
sharp_img.show('Ketajaman Ditingkatkan')

"""Equalized Histogram
![image.png](attachment:image.png)
"""

# equalized histogram dengan openCV

img_gray = cv2.imread(low_pict_path, cv2.IMREAD_GRAYSCALE)
equalized_img = cv2.equalizeHist(img_gray)

cv2.imshow('Original Grayscale', img_gray)
cv2.imshow('Histogram Equalized', equalized_img)
cv2.waitKey(0)
cv2.destroyAllWindows()

"""### Image Restore"""

noised_img_path = './images/noised_image.png'

"""1. Mengurangi Noise"""

## Mengurangi Noise dengan openCV
img = cv2.imread(noised_img_path)

# Filter Gaussian
gaussian_blur = cv2.GaussianBlur(img, (5, 5), 0)

# Filter Median
median_blur = cv2.medianBlur(img, 5)

# Filter Bilateral
bilateral_filter = cv2.bilateralFilter(img, 9, 75, 75)

cv2.imshow('Original', img)
cv2.imshow('Gaussian', gaussian_blur)
cv2.imshow('Median Blur', median_blur)
cv2.imshow('Bilateral Filter', bilateral_filter)
cv2.waitKey(0)
cv2.destroyAllWindows()

## Mengurangi Noise dengan PIL
from PIL import Image, ImageFilter

img = Image.open(noised_img_path)
img.show()

# Filter Gaussian Blur
gaussian_img = img.filter(ImageFilter.GaussianBlur(radius=2))
gaussian_img.show('Gaussian Blur PIL')

# Filter Median
median_img = img.filter(ImageFilter.MedianFilter(size=3))
median_img.show('Median Filter PIL')

"""2. Inpainting"""

## Inpainting dengan openCV
img = cv2.imread('images/original.png')
mask = cv2.imread('images/masked.png', cv2.IMREAD_GRAYSCALE)

# Lakukan inpainting
inpainted = cv2.inpaint(img, mask, inpaintRadius=3, flags=cv2.INPAINT_TELEA)

cv2.imshow('Original', img)
cv2.imshow('Inpainted', inpainted)
cv2.waitKey(0)
cv2.destroyAllWindows()

"""### Image Color Processing"""

## Image Color Processing dengan openCV
img_bgr = cv2.imread(cats_img_path)

# Konversi dari BGR ke Grayscale
img_gray = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2GRAY)

# Konversi dari BGR ke HSV (Hue, Saturation, Value)
# HSV sering digunakan untuk deteksi warna
img_hsv = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2HSV)

# OpenCV membaca sebagai BGR, untuk menampilkannya dengan benar
# di library lain seperti Matplotlib, perlu dikonversi ke RGB.
img_rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)


cv2.imshow('BGR (Default OpenCV)', img_bgr)
cv2.imshow('Grayscale', img_gray)
cv2.imshow('HSV', img_hsv)
cv2.imshow('RGB (untuk Matlab)', img_bgr)
cv2.waitKey(0)
cv2.destroyAllWindows()

## Menggunakan PIL

img_rgb = Image.open(cats_img_path)

# Konversi dari RGB ke Grayscale ('L' mode)
img_gray = img_rgb.convert('L')
img_gray.show('Grayscale PIL')

# Konversi ke CMYK (untuk percetakan)
img_cmyk = img_rgb.convert('CMYK')
img_cmyk.show('CMYK PIL')

# Memisahkan kanal warna R, G, B
r, g, b = img_rgb.split()
r.show(title='Red Channel')

"""### Image Compression"""

birds_img_path = "./images/birds.jpg"

# kompresi ke JPG dengan openCV

img = cv2.imread(birds_img_path)

cv2.imwrite('hasil_kompresi_50.jpg', img, [cv2.IMWRITE_JPEG_QUALITY, 50])

cv2.imwrite('hasil_kompresi_10.jpg', img, [cv2.IMWRITE_JPEG_QUALITY, 10])

compressed_10 = cv2.imread('hasil_kompresi_10.jpg')
compressed_50 = cv2.imread('hasil_kompresi_50.jpg')
print(img.shape)
print(compressed_10.shape)
print(compressed_50.shape)

# kompresi ke PNG dengan openCV

img = cv2.imread(birds_img_path)

cv2.imwrite('hasil_kompresi_9.png', img, [cv2.IMWRITE_PNG_COMPRESSION, 9])

print(img.shape)
img_compressed = cv2.imread('hasil_kompresi_9.png')
print(img_compressed.shape)

## Kompresi dengan PIL
img = Image.open(birds_img_path)

# Menyimpan dengan kualitas 85 (0-100)
img.save('hasil_pil_50.jpg', 'jpeg', quality=50)

# Menyimpan dengan optimasi (bisa mengurangi ukuran file sedikit)
img.save('hasil_pil_optimized.jpg', 'jpeg', optimize=True, quality=10)

type(img)